?rpois
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3:"October 17, 1986 08:24"
t3<-"Object 17, 1986 08:24"
t3<-("October 17, 1986 08:24")
info()
play()
t3<-strptime("October 17,1986 08:24")
skip()
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(cars$Speed, cars$dist)
plot(cars$speed)
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars()
data.frame(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
args(remainder)
skip()
evaluate(c(1.4,3.6,7.9,8.8))
skip()
evaluate(function(x){x+1},6)
skip()
evaluate(function(x){x[3]},c(8,4,0))
length(function(x))
length(function())
skip()
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
function(...,sep=" "){x}
skip()
telegram(...)
telegram(x)
submit()
skip()
?mad_libs
skip()
bin_op
skip()
%p%("I","love","R!")
"I" %p% "love" %p% "R!"
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
skip()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(func, c(1.4,3.6,7.9,8.8))
skip()
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x),{x[1]})
evaluate(func(x),{x[1]})
skip()
evaluate(function(x){x[3]},c(8,4,0))
skip()
?paste
paste("Programming", "is", "fun!")
submit()
skip()
submit()
skip()
mad_libs(place="",adjective="",noun="")
submit()
"I" % "love" % "R!"
"I" %p
"I" %p% "love" %p% "R!"
set.seed(1)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
system.time(readLines("http://fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
hilbert<-function(n){
i<-1:n
1/outer(i-1.i,"+")
}
hilbert(1000)
x<-hilbert(1000)
x
hilbert<-function(n){
i<-1:n
1/outer(i-1,i,"+")
}
x<-hilbert(1000)
x
system.time(x<-hilbert(1000))
system.time(svd(x))
system.time(x<-hilbert(1000))
system.time(svd(x))
debugSource('~/GitHub/Programacion_Actuarial_III_OT16/Clase 25Agosto.R')
x<-4L
class(x)
x<-c(4,TRUE)
class(x)
x<-c(1,3,5)
y<-c(2,3,4)
rbind(x,y)
x<-list(2,"a","b",TRUE)
X[[2]]
x[[2]]
y<-x[[2]]
class(y)
x<-c(17,14,4,5,13,12,10)
x[x>=11]<-4
x
head(airquality)
nrow(airquality)
airquality[47,]
is.na(airquality)
airquality[is.NA(),1]
y<-airquality[,1]
y
sum(y,na.rm=TRUE)
mean(y,rm.na=TRUE)
mean(y,na.rm=TRUE)
head(airquality)
x<-which(airquality$Ozone>31)
y<-which(airquality$Temp>20)
airquality[x,y]
x
y
x<-which(airquality$Ozone>31,arr.ind = T)
x<-which(airquality$Ozone>31,arr.ind = T)
x
y<-which(airquality$Temp>20,arr.ind=T)
rbind(x,y)
airquality[x,]
airquality[y,]
airquality[x&&y,]
t<-airquality[x&&y,]
t<-airquality[x&&y,2]
mean(t,na.rm=TRUE)
y<-which(airquality$Temp>90,arr.ind=T)
t<-airquality[x&&y,2]
mean(t,na.rm=TRUE)
t
s<-split(airquality,airquality$Month)
s
s$5
s<-split(airquality,airquality$Month$5)
s[2]
t<-s[2,4]
s[2]
t<-s[2]
t
t[,4]
mean(t$Temp)
colMeans(t[,4])
colMeans(t[,1:61],na.rm=T)
colMeans(t[4], na.rm=T)
sapply(s,function(x), colMean(x[,4],na.rm=T))
airquality[,$Month]
s[1]
s[2]
colMeans(s[2],4)
mean((s[2],4),na.rm=TRUE)
t<-s[2]
t
mean(t,4)
r<-t[4]
r
r<-t[,4]
t$Temp
?colMeans
colMeans(t,na.rm=TRUE)
t<-s[2]
colMeans(t,na.rm=TRUE)
airquality$Temp
airquality[,32:61]
airquality[ ,32:61]
airquality$Temp
s<-split(airquality,airquality$Month$5)
s<-split(airquality,airquality$Month)
s
s[2]
nrow(s[2])
airquality[,1]
x<-airquality[,1]
complete.cases(x)
sum(complete.cases(x))
116+37
airquality[47,1]
x<-c(17,14,4,5,13,12,10)
x[x==10]<-4
x
mean(x,na.rm=TRUE)
x<-airquality[,1]
mean(x,na.rm=TRUE)
x<-which(airquality$Ozone>31,arr.ind = T)
y<-which(airquality$Temp>90,arr.ind=T)
t<-airquality[x&&y,2]
mean(t,na.rm=TRUE)
x
y
x&&y
t
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
}
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
}
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
}
>
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
}
rankhospital<-function(estado, resultado,num="mejor"){
#Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
filas<-nrow(outcome)
columna<-vector("numeric")
estados <- levels(factor(outcome[, 7]))
#Revisión de la validez de estado y resultado
if (estado %in% estados == F){
stop("Estado inválido")
}
if (!((resultado == "ataque")|(resultado == "falla")| (resultado == "neumonía"))){
stop("Resultado inválido")
}
if (resultado == "ataque") {
columna <- 11
} else if (resultado == "falla") {
columna <- 17
} else if (resultado == "neumonía") {
columna <- 23
}
# Regresa el nombre del hospital con el puesto dado de la tasa más
# baja de mortalidad de 30 días
Tasa <- matrix(outcome[,columna],nrow=filas,ncol=1)
outcome[,columna] <-suppressWarnings(as.numeric(Tasa)) #NA coercionados
Nombre <- outcome[grep(estado,outcome$State),] #busca coincidencias con el argumento
#para cada elemento de un vector de caracteres
Ordenar <- Nombre[order(Nombre[,columna], Nombre[,2], na.last=NA),]
if(num == "mejor") {
Ordenar[1, 2]
} else if(num == "peor") {
Ordenar[nrow(Ordenar), 2]
} else{
Ordenar[num, 2]
}
}
rankhospital("TX", "falla", 4)
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Caso 2")
rankhospital("TX", "falla", 4)
